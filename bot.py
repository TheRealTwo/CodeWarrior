# files
import database as db
import blog_parse
import buttons as btn
import config
# libs
from aiogram import Bot, Dispatcher, executor, types
import logging
import requests
import time
import aioschedule
import asyncio

USER_ID = -1

# —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='example.log',
                    format='%(asctime)s %(levelname)s %(name)s %(message)s',
                    level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)


async def on_startup(_):
    asyncio.create_task(news())

# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands="start")
async def start(message: types.Message):
    global USER_ID
    USER_ID = message.from_user.id
    print(USER_ID)
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø - –ø–æ–∫–æ—Ä–Ω—ã–π —Å–ª—É–≥–∞ —Ç–∞–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è, –∫–∞–∫ Codeforces."
                         " –Ø —É–º–µ—é —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–∞–∫–∏—Ö –∂–µ —Å–º–∏—Ä–µ–Ω–Ω—ã—Ö, –∫–∞–∫ –∏ —è, –æ –≥—Ä—è–¥—É—â–∏—Ö –∫–æ–Ω—Ç–µ—Å—Ç–∞—Ö,"
                         " —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö, –∞ —Ç–∞–∫ –∂–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å api —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞. –ñ–µ–ª–∞—é –í–∞–º —É–¥–∞—á–∏!", reply_markup=btn.menu)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands="menu")
async def menu(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=btn.menu)

# –í—ã–±–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'subscriptions')
async def choose_subscriptions(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=btn.subscriptions)

# –†–∞—Å—Å—ã–ª–∫–∞ –±–ª–æ–≥–∞
@dp.callback_query_handler(lambda c: c.data == 'blog')
async def blog_subscriptions(callback_query: types.CallbackQuery):
    if db.get_subs(USER_ID)['blog']:
        text = '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –±–ª–æ–≥–∞'
        await bot.send_message(callback_query.from_user.id, text, reply_markup=btn.unsub_blog)
    else:
        text = '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –±–ª–æ–≥–∞.'
        await bot.send_message(callback_query.from_user.id, text, reply_markup=btn.sub_blog)

# –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–ª–æ–≥
@dp.callback_query_handler(lambda c: c.data == 'sub_blog')
async def subscribe_blog(callback_query: types.CallbackQuery):
    db.change_subscription(USER_ID, blog=True)
    await bot.send_message(callback_query.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!üòÄ', reply_markup=btn.menu)

# –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –±–ª–æ–≥–∞
@dp.callback_query_handler(lambda c: c.data == 'unsub_blog')
async def subscribe_blog(callback_query: types.CallbackQuery):
    db.change_subscription(USER_ID, blog=False)
    await bot.send_message(callback_query.from_user.id, '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å. –ö–∞–∫ –∂–∞–ª—åüò•', reply_markup=btn.menu)

# –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤
@dp.callback_query_handler(lambda c: c.data == 'contests')
async def contest_subscriptions(callback_query: types.CallbackQuery):
    if db.get_subs(USER_ID)['contests']:
        text = '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤'
        await bot.send_message(callback_query.from_user.id, text, reply_markup=btn.unsub_contests)
    else:
        text = '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤.'
        await bot.send_message(callback_query.from_user.id, text, reply_markup=btn.sub_contests)

# –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Ç–µ—Å—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'sub_contests')
async def subscribe_contests(callback_query: types.CallbackQuery):
    db.change_subscription(USER_ID, contests=True)
    await bot.send_message(callback_query.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!üòÄ', reply_markup=btn.menu)

# –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤
@dp.callback_query_handler(lambda c: c.data == 'unsub_contests')
async def unsubscribe_contests(callback_query: types.CallbackQuery):
    db.change_subscription(USER_ID, contests=False)
    await bot.send_message(callback_query.from_user.id, '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å. –ö–∞–∫ –∂–∞–ª—åüò•', reply_markup=btn.menu)



# –ë–ª–∏–∂–∞–π—à–∏–µ –∫–æ–Ω—Ç–µ—Å—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'current_contests')
async def current_contests(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ö–∞–∫–∏–µ –∫–æ–Ω—Ç–µ—Å—Ç—ã –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?', reply_markup=btn.choose_contests)


# –í—Å–µ –±–ª–∏–∂–∞–π—à–∏–µ –∫–æ–Ω—Ç–µ—Å—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'all_current_contests')
async def current_contests(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É...')
    contests = get_contests(False)
    text = '–í–æ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –∫–æ–Ω—Ç–µ—Å—Ç—ã:\n'
    for el in contests:
        text += f'*–°—Å—ã–ª–∫–∞:* https://codeforces.com/contest/{el[0]}\n'
        text += f'*–ù–∞–∑–≤–∞–Ω–∏–µ:* {el[1]}\n'
        duration_time = int(el[2] / 60)
        duration_time = str(duration_time // 60) + ' —á. ' + str(duration_time % 60) + ' –º–∏–Ω.' if duration_time % 60 != 0 else str(duration_time // 60) + ' —á.'
        text += f'*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ' + duration_time + '\n'
        if el[3] == 'BEFORE':
            status = '–Ω–µ –Ω–∞—á–∞–ª—Å—è'
        elif el[3] == 'FINISHED':
            status = '–∑–∞–∫–æ–Ω—á–µ–Ω'
        else:
            status = '–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è'
        text += f'*–°—Ç–∞—Ç—É—Å:* {status}\n'
        if el[4] and el[3] == 'BEFORE':
            rem_time = abs(el[4] - time.time())
            days = abs(int(rem_time // 86400))
            hours = abs(int((rem_time % 86400) // 3600))
            mins = abs(int(((rem_time % 86400) % 3600) // 60))
            text += f'*–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {days} –¥. {hours} —á. {mins} –º–∏–Ω.\n'
        text += '\n'
    await bot.send_message(callback_query.from_user.id, text, reply_markup=btn.menu, parse_mode='Markdown', disable_web_page_preview=True)


# –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –±–ª–∏–∂–∞–π—à–∏–µ –∫–æ–Ω—Ç–µ—Å—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'training_current_contests')
async def current_contests(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É...')
    contests = get_contests(True)
    text = '–í–æ—Ç –±–ª–∏–∂–∞–π—à–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∫–æ–Ω—Ç–µ—Å—Ç—ã:\n'
    for el in contests:
        text += f'*–°—Å—ã–ª–∫–∞:* https://codeforces.com/contest/{el[0]}\n'
        text += f'*–ù–∞–∑–≤–∞–Ω–∏–µ:* {el[1]}\n'
        duration_time = int(el[2] / 60)
        duration_time = str(duration_time // 60) + ' —á. ' + str(duration_time % 60) + ' –º–∏–Ω.' if duration_time % 60 != 0 else str(duration_time // 60) + ' —á.'
        text += f'*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ' + duration_time + '\n'
        if el[3] == 'BEFORE':
            status = '–Ω–µ –Ω–∞—á–∞–ª—Å—è'
        elif el[3] == 'FINISHED':
            status = '–∑–∞–∫–æ–Ω—á–µ–Ω'
        else:
            status = '–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è'
        text += f'*–°—Ç–∞—Ç—É—Å:* {status}\n'
        if el[4] and el[3] == 'BEFORE':
            rem_time = abs(el[4] - time.time())
            days = abs(int(rem_time // 86400))
            hours = abs(int((rem_time % 86400) // 3600))
            mins = abs(int(((rem_time % 86400) % 3600) // 60))
            text += f'*–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {days} –¥. {hours} —á. {mins} –º–∏–Ω.\n'
        text += '\n'
    await bot.send_message(callback_query.from_user.id, text, reply_markup=btn.menu, parse_mode='Markdown', disable_web_page_preview=True)








async def check_for_new_posts(id=db.get_last_rus_post() + 1):
    rus_id = id
    start_rus_id = rus_id
    while True:
        response = requests.get(f'https://codeforces.com/api/blogEntry.view?blogEntryId={id}')
        if response.ok:
            logging.warning('API is not working now. Skipping...')
            return
        try:
            response = response.json()
        except Exception as e:
            logging.warning('API is not working now. Skipping...')
            return
        if response['status'] == 'FAILED':
            break
        if response['result']['oroginalLocale'] == 'ru':
            rus_id = id
        id += 1
    if start_rus_id != rus_id:
        db.change_post(rus_id)
        text = blog_parse.post_content(rus_id)
        if db.get_subs(USER_ID)['blog']:
            await post_new_blog(text)


# –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤ —á–∞—Å–æ–≤–æ–π –∏ –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
async def check_for_nearest_contests():
    contests = get_contests(False)
    contests = list(filter(lambda x: abs(time.time() - x[-1]) // 86400 <= 1, contests))
    for el in contests:
        if 3300 < abs(time.time() - el[-1]) < 3900:
            await post_nearest_contest(('—á–∞—Å–∞', el))
            return
        elif 86100 < abs(time.time() - el[-1]) < 86700:
            if db.get_subs(USER_ID)['contests']:
                await post_nearest_contest(('–¥–Ω—è', el))
            return

async def news():
    aioschedule.every(5).minutes.do(check_for_nearest_contests)
    aioschedule.every(5).minutes.do(check_for_new_posts)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

def get_contests(gym, token=None):
    response = requests.get(f'https://codeforces.com/api/contest.list?gym={gym}').json()['result']
    response = list(filter(lambda x: 'startTimeSeconds' in list(x.keys()), response))
    response = list(filter(lambda x: abs(time.time() - x['startTimeSeconds']) // 86400 <= 14, response))
    ans = []
    for el in response:
        row = (el['id'], el['name'], el['durationSeconds'], el['phase'], el['startTimeSeconds'])
        ans.append(row)
    return ans
    





async def post_nearest_contest(msg, callback_query=types.CallbackQuery):
    text = '*–í–ù–ò–ú–ê–ù–ò–ï!!*\n'
    text += f"–î–æ –∫–æ–Ω—Ç–µ—Å—Ç–∞ *{msg[1][1]}* –æ—Ç—Å–∞–ª–æ—Å—å –æ–∫–æ–ª–æ {msg[0]}!\n–°—Å—ã–ª–∫–∞: https://codeforces.com/contest/{msg[1][0]}\n–£–¥–∞—á–∏!"
    await bot.send_message(USER_ID, text, reply_markup=btn.menu, parse_mode='Markdown', disable_web_page_preview=True)



async def post_new_blog(msg, callback_query=types.CallbackQuery):
    await bot.send_message(USER_ID, msg, reply_markup=btn.menu, parse_mode='HTML', disable_web_page_preview=True)
    
# –∑–∞–ø—É—Å–∫ "–ª–æ–Ω–≥-–ø–æ–ª–ª–∏–Ω–≥" (–∞–ø–¥–µ–π—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è)
if __name__ == '__main__':
    while True:
        try:
            executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
        except Exception as e:
            logging.error(e)
            print(e)
            continue
